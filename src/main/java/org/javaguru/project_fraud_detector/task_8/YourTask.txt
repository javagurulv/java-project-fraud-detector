Изучаем Single Responsibility Principle.

Как вы видите, бизнес может добавлять и добавлять
новые правила для автоматического обнаружения мошенничества.

Если мы продолжим вносить изменения и новую функциональность
в класс FraudDetector, то этот класс станет очень большим.
Хуже того, ответственность этого класса будет только расти.

Под ответственностью тут понимается то, что данный класс берёт на себя
обязанности реализации всех правил. Это плохо, потому что слишком
много обязанностей равно слишком много возможностей для ошибки.

В программировании самый лучший класс это тот класс,
который следует Single Responsibility Principle.

Одна ответственность
= одна причина для внесения изменений
= минимум возможных ошибок
= более качественный и устойчивый код.

Перед чтением задания дальше, подумайте как можно применить
правило Single Responsibility Principle для класса FraudDetector.

Попробуйте реализовать придуманный вами план!

Что из этого получилось?

Дополнительно к данному заданию советуем прочитать:
https://en.wikipedia.org/wiki/Single-responsibility_principle
https://en.wikipedia.org/wiki/SOLID

#### Поддержка, вопросы и обратная связь по проекту
* [Телеграмм группа проекта](https://t.me/+YmrodVgEq88xYjU0)
* [Телеграмм автора курса] (@javagurulv)
* [Емейл автора курса] (javagurulv@gmail.com)
